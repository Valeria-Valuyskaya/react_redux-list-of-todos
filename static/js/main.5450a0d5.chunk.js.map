{"version":3,"sources":["store/actions.ts","store/index.ts","api.ts","store/selectors.ts","components/TodosList/TodosList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","loadTodosAction","payload","type","loadUserAction","initialState","todos","user","store","createStore","state","action","url","getTodos","a","fetch","response","json","getUser","userId","getTodosSelector","getUserSelector","TodosList","useState","searchTitle","setSearchTitle","selectTodo","setSelectTodo","dispatch","useDispatch","useSelector","handleClick","userFromServer","useEffect","loadTodosFromServer","todosFromServer","getSelectedTodos","copyTodos","filter","todo","title","toLowerCase","includes","completed","changedTodos","className","htmlFor","id","placeholder","value","onChange","event","target","name","map","classNames","onClick","todoId","afterDeletingTodo","deleteTodo","readOnly","checked","newTodoStatus","changeStatus","CurrentUser","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5450a0d5.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport const LOAD_TODOS = 'LOAD_TODOS';\nexport const LOAD_USER = 'LOAD_USER';\n\nexport const loadTodosAction = (payload: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload,\n});\n\nexport const loadUserAction = (payload: User | null) => ({\n  type: LOAD_USER,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { Action, State } from '../react-app-env';\nimport { LOAD_TODOS, LOAD_USER } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","import { Todo, User } from './react-app-env';\n\nconst url = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${url}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${url}/users/${userId}`);\n\n  return response.json();\n}\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\nexport const getUserSelector = (state: State) => state.user;\n","import React, { useEffect, useState } from 'react';\nimport './TodosList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { getTodos, getUser } from '../../api';\nimport { loadTodosAction, loadUserAction } from '../../store/actions';\nimport { getTodosSelector } from '../../store/selectors';\n\nexport const TodosList: React.FC = () => {\n  const [searchTitle, setSearchTitle] = useState('');\n  const [selectTodo, setSelectTodo] = useState('');\n\n  const dispatch = useDispatch();\n\n  const todos = useSelector(getTodosSelector);\n\n  const handleClick = async (userId: number) => {\n    const userFromServer = await getUser(userId);\n\n    dispatch(loadUserAction(userFromServer));\n  };\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(loadTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const handleSearchTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setSearchTitle(value);\n  };\n\n  const handleSearchStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectTodo(value);\n  };\n\n  const changedTodos = () => {\n    const copyTodos = todos.filter(todo => todo.title.toLowerCase()\n      .includes(searchTitle.toLowerCase()));\n\n    if (selectTodo === 'active') {\n      return copyTodos.filter(todo => !todo.completed);\n    }\n\n    if (selectTodo === 'completed') {\n      return copyTodos.filter(todo => todo.completed);\n    }\n\n    return copyTodos;\n  };\n\n  const getSelectedTodos = changedTodos();\n\n  const changeStatus = (userId: number) => {\n    const newTodoStatus = todos.map(todo => {\n      if (todo.id === userId) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    dispatch(loadTodosAction(newTodoStatus));\n  };\n\n  const deleteTodo = (todoId: number) => {\n    const afterDeletingTodo = todos.filter(todo => todoId !== todo.id);\n\n    dispatch(loadTodosAction(afterDeletingTodo));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__search\">\n        <label htmlFor=\"search-query\" className=\"label\">\n          Search todo\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"search-query\"\n              className=\"TodoList__item\"\n              placeholder=\"Type search todo\"\n              value={searchTitle}\n              onChange={handleSearchTitle}\n            />\n          </div>\n        </label>\n      </div>\n      <div className=\"select\">\n        <select\n          name=\"selectTodo\"\n          value={selectTodo}\n          onChange={handleSearchStatus}\n          className=\"TodoList__item\"\n        >\n          <option value=\"all\">Show all</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {getSelectedTodos.map(todo => (\n            <li\n              className={classNames('TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed })}\n              key={todo.id}\n            >\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => deleteTodo(todo.id)}\n              >\n                Delete\n              </button>\n              <label htmlFor=\"search-query\">\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                  onChange={() => changeStatus(todo.id)}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => handleClick(todo.userId)}\n              >\n                User #\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadUserAction } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUserSelector);\n\n  if (!user) {\n    return (\n      <div>No selected user</div>\n    );\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {user.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => dispatch(loadUserAction(null))}\n      >\n        Remove\n      </button>\n    </div>\n  );\n};\n","import './App.scss';\nimport './styles/general.scss';\nimport { TodosList } from './components/TodosList/TodosList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodosList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}